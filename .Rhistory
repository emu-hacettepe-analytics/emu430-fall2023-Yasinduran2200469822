obbies
data_frame<- data.frame(title,year,duration,rating,votes)
title >> html_elements(".ipc-title__text")
title <- html_elements(".ipc-title__text")
# View the resulting data frame
print(result_df)
# Initialize an empty data frame to store the results
result_df <- data.frame()%>%
# Loop over search URLs and scrape data
for (url in search_urls) {
partial_df <- scrape_imdb_data(url)
result_df <- bind_rows(result_df, partial_df)
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop over search URLs and scrape data
for (url in search_urls) {
partial_df <- scrape_imdb_data(url)
result_df <- bind_rows(result_df, partial_df)
}
# Combine URLs into a vector
search_urls<- c(partial_url_1, partial_url_2)
# URLs for movies released in 2010-2023 and before 2010
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
# 1. List all Turkish movies with more than 2500 reviews and save URLs
# Construct the search URL
search_url<- "https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
# URLs for movies released in 2010-2023 and before 2010
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
partial_url_2<- paste0(search_url, "&release_date=,2009-12-31")
# Combine URLs into a vector
search_urls<- c(partial_url_1, partial_url_2)
# 2. Web scraping to create a Data Frame
# Define a function to scrape IMDb data from a given URL
scrape_imdb_data <- function(url) {
page <- read_html(url)
View(result_df)
View(result_df)
View(result_df)
View(result_df)
votes <- html_elements('.ipc-metadata-list-item:nth-child(2) .ipc-metadata-list-item__list-content')
View(result_df)
votes <- html_elements(".kRnqtn")
# Process the data
years <- as.numeric(years)
durations <- str_extract(durations, "\\d+") %>% as.numeric()
ratings <- as.numeric(ratings)
votes <- as.numeric(str_extract(votes, "\\d+"))
library(tidyverse)
library(rvest)
library(stringr)
library(tidyverse)
library(rvest)
library(stringr)
# 1. List all Turkish movies with more than 2500 reviews and save URLs
# Construct the search URL
search_url<- "https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250"
# URLs for movies released in 2010-2023 and before 2010
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
partial_url_2<- paste0(search_url, "&release_date=,2009-12-31")
# Combine URLs into a vector
search_urls<- c(partial_url_1, partial_url_2)
# 2. Web scraping to create a Data Frame
# Define a function to scrape IMDb data from a given URL
scrape_imdb_data <- function(url) {
page <- read_html(url)
titles <-html_elements('.ipc-title__text')
years <-html_elements(".dli-title-metadata-item:nth-child(1)")
durations<-html_elements(".dli-title-metadata-item:nth-child(2)")
ratings <-html_elements(".ratingGroup--imdb-rating")
votes <- html_elements(".kRnqtn")
# Process the data
years <- as.numeric(years)
durations <- str_extract(durations, "\\d+") %>% as.numeric()
ratings <- as.numeric(ratings)
votes <- as.numeric(str_extract(votes, "\\d+"))
# Create a data frame
movie_data <- data.frame(
Title = titles,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
return(movie_data)
}
# Initialize an empty data frame to store the results
result_df <- data.frame()
# Loop over search URLs and scrape data
for (url in search_urls) {
partial_df <- scrape_imdb_data(url)
result_df <- bind_rows(result_df, partial_df)
}
print(result_df)
print(result_df)
print(result_df)
---
title: "Assignment 2"
sidebar: false
---
library(tidyverse)
library(rvest)
library(stringr)
search_url<- ("https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250")
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
partial_url_2<- paste0(search_url, "&release_date=,2009-12-31")
search_urls<- c(partial_url_1, partial_url_2)
print(result_df)
kable(result_df, format = "html", caption = "search_url")
---
title: "Assignment 2"
sidebar: false
---
library(tidyverse)
library(rvest)
library(stringr)
search_url<- ("https://m.imdb.com/search/title/?title_type=feature&num_votes=2500,&country_of_origin=TR&count=250")
partial_url_1<- paste0(search_url, "&release_date=2010-01-01,2023-12-31")
partial_url_2<- paste0(search_url, "&release_date=,2009-12-31")
movies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)
kable(head(movies_df,10), caption = "Movies Dataframe")
```
print(result_df)
kable(result_df, format = "html", caption = "search_url")
print(result_df)
Let's take a look at the movies dataframe, ordered by rankings.
```{r, message=FALSE}
kable(head(movies_df,11), caption = "Movies Dataframe")
```
Let's take a look at the movies dataframe, ordered by rankings.
kable(head(movies_df,11), caption = "Movies Dataframe")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
